#------Experiments to test (separated with commas)-----
data.experiments=['eft_challenge']
data.over_sampling=[1, 6]

#------ Parameter list -------
# data.parameters[class name] = [mean, min, max, 1-sigma, scale, role]
# - if min max irrelevant, put to -1 or None (if you want a boundary of -1, use -1.0)
# - if fixed, put 1-sigma to 0
# - if scale irrelevant, put to 1, otherwise to the appropriate factor
# - role is either 'cosmo', 'nuisance' or 'derived'

# Cosmological parameters list
data.parameters['omega_b']          = [2.214, 2.0, 2.4, 0.3, 0.01, 'cosmo']
data.parameters['omega_cdm']    = [0.11891, 0.05, 0.25, 0.003, 1, 'cosmo']
data.parameters['h']            = [0.6777, 0.5, 0.85, 0.03, 1, 'cosmo']
data.parameters['ln10^{10}A_s'] = [3.0824, 2., 4., 0.1, 1, 'cosmo']
data.parameters['n_s']          = [0.96, 0.5, 1.5, 0.04, 1,   'cosmo']

# Nuisance parameter list, same call, except the name does not have to be a class name
data.parameters['b1']  = [2, 0, 4, 0.5, 1,  'nuisance']
data.parameters['c2']  = [1.5, -4, 4, 0.5, 1,  'nuisance']

data.parameters['b3']     = [0, None, None, 0,     1,   'derived_lkl']
data.parameters['cct']     = [0, None, None, 0,     1,   'derived_lkl']
data.parameters['cr1']     = [0, None, None, 0,     1,   'derived_lkl']

### To put back if running with hexadecapole
# data.parameters['cr2']     = [0, None, None, 0,     1,   'derived_lkl']

### Stochastic terms for PS (if absent (as for CF), will always be zero)
data.parameters['ce2']     = [0, None, None, 0,     1,   'derived_lkl']
data.parameters['ce0']     = [0, None, None, 0,     1,   'derived_lkl']


#------ Mcmc parameters ----
# Number of steps taken, by default (overwritten by the -N command)
data.N = 10
# Number of accepted steps before writing to file the chain. Larger means less
# access to disc, but this is not so much time consuming.
data.write_step = 10


